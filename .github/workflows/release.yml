name: Build Linux and macOS Binaries

on:
  push:
    tags:
      - '*'

jobs:
  # Step 1: Create Release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

   # Step 2: Build and Upload Binaries
  build-and-upload:
    runs-on: ubuntu-latest
    needs: create-release  # Ensure release is created first
    strategy:
      matrix:
        goos: [linux, darwin]   # Linux and macOS
        goarch: [amd64, arm64]  # Architectures for Linux and macOS
        exclude:                # Exclude invalid combinations
          - goos: darwin
            goarch: amd64
    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Go
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.23'

      # Step 3: Build binaries with Makefile
      - name: Build binary
        run: |
          mkdir -p bin
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} make

      # Step 4: Upload binaries to the release
      - name: Upload Linux and macOS binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./bin/monitor-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_name: monitor-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}